// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_package = "io.grpc.examples";

package tafs;

// The greeting service definition.
service ToyAFS {
    // Sends a greeting
    rpc GetAttr (GetAttrReq) returns (GetAttrReply) {}
    rpc Open (OpenReq) returns (OpenReply) {}
    //rpc Read (ReadReq) returns (ReadReply) {}
    rpc ReadS (ReadSReq) returns (stream ReadSReply) {}
    //rpc Write (WriteReq) returns (WriteReply) {}
    rpc WriteS (stream WriteSReq) returns (WriteSReply) {}
    rpc ReadDir (ReadDirReq) returns (stream ReadDirReply) {}
    rpc MkDir (MkDirReq) returns (MkDirReply) {}
    rpc RmDir (RmDirReq) returns (RmDirReply) {}
    rpc Unlink (UnlinkReq) returns (UnlinkReply) {}
    rpc Access(AccessReq) returns (AccessReply) {}
    rpc Flush(FlushReq) returns (FlushReply) {}
    rpc Mknod(MknodReq) returns (MknodReply) {}
    rpc Truncate(TruncateReq) returns (TruncateReply) {}
    rpc Rename (RenameReq) returns (RenameReply) {}
}

// Rename
message RenameReq {
  string oldpath = 1;
  string newpath = 2;
}

message RenameReply {
  int32  err = 1;
}

// Truncate
message TruncateReq {
    string path = 1;
    int32  size = 2;
}

message TruncateReply {
    int32  err = 1;
}

// Mknod
message MknodReq {
    string path = 1;
    int32  mode = 2;
    int32  rdev = 3;
}

message MknodReply {
    int32 err = 1;
}

// flush
message FlushReq {
    string path = 1;
}

message FlushReply {
    int32 err = 1;
}

// Access
message AccessReq{
    string path = 1;
    int32  mode = 2;
}

message AccessReply{
    int32  err = 1;
}

// ReadDir
message ReadDirReq{
    string path = 1;
}

message ReadDirReply {
    int32 err = 1;
    bytes buf = 2;
}

// MkDir
message MkDirReq {
    string path = 1;
    int32 mode = 2;
}

message MkDirReply {
    int32 err = 1;
}

// RmDir
message RmDirReq {
    string path = 1;
}

message RmDirReply {
    int32 err = 1;
}

// Unlink
message UnlinkReq {
    string path = 1;
}

message UnlinkReply {
    int32 err = 1;
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}

message GetAttrReq {
    string path = 1;
    bytes  buf = 2; // stat
}

message GetAttrReply {
    bytes  buf = 2; // stat
    int32 err = 1;
}

message OpenReq {
    string path = 1;
    int32  flag = 2;
}

message OpenReply{
    int32  err = 1;
}

// Read Streaming
message ReadSReq {
    string path = 1;
    int32  size = 2;
    int32  offset = 3;
}

message ReadSReply {
    int32 num_bytes = 1;
    bytes buf  = 2;
}

// Write Streaming
message WriteSReq {
    string path = 1;
    bytes  buf = 2;
    int32  size = 3;
    int32  offset = 4;
}

message WriteSReply {
    int32 num_bytes = 1;
}
